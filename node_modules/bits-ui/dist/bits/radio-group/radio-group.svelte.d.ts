import { type ReadableBoxedValues, type WritableBoxedValues } from "svelte-toolbelt";
import type { BitsFocusEvent, BitsKeyboardEvent, BitsMouseEvent, RefAttachment, WithRefOpts } from "../../internal/types.js";
import type { Orientation } from "../../shared/index.js";
import { RovingFocusGroup } from "../../internal/roving-focus-group.js";
interface RadioGroupRootStateOpts extends WithRefOpts, ReadableBoxedValues<{
    disabled: boolean;
    required: boolean;
    loop: boolean;
    orientation: Orientation;
    name: string | undefined;
    readonly: boolean;
}>, WritableBoxedValues<{
    value: string;
}> {
}
export declare class RadioGroupRootState {
    static create(opts: RadioGroupRootStateOpts): RadioGroupRootState;
    readonly opts: RadioGroupRootStateOpts;
    readonly hasValue: boolean;
    readonly rovingFocusGroup: RovingFocusGroup;
    readonly attachment: RefAttachment;
    constructor(opts: RadioGroupRootStateOpts);
    isChecked(value: string): boolean;
    setValue(value: string): void;
    readonly props: {
        readonly id: string;
        readonly role: "radiogroup";
        readonly "aria-required": "true" | "false";
        readonly "aria-disabled": "true" | "false";
        readonly "aria-readonly": "true" | undefined;
        readonly "data-disabled": "" | undefined;
        readonly "data-readonly": "" | undefined;
        readonly "data-orientation": Orientation;
    };
}
interface RadioGroupItemStateOpts extends WithRefOpts, ReadableBoxedValues<{
    disabled: boolean;
    value: string;
}> {
}
export declare class RadioGroupItemState {
    #private;
    static create(opts: RadioGroupItemStateOpts): RadioGroupItemState;
    readonly opts: RadioGroupItemStateOpts;
    readonly root: RadioGroupRootState;
    readonly attachment: RefAttachment;
    readonly checked: boolean;
    constructor(opts: RadioGroupItemStateOpts, root: RadioGroupRootState);
    onclick(_: BitsMouseEvent): void;
    onfocus(_: BitsFocusEvent): void;
    onkeydown(e: BitsKeyboardEvent): void;
    readonly snippetProps: {
        checked: boolean;
    };
    readonly props: {
        readonly id: string;
        readonly disabled: true | undefined;
        readonly "data-value": string;
        readonly "data-orientation": Orientation;
        readonly "data-disabled": "" | undefined;
        readonly "data-readonly": "" | undefined;
        readonly "data-state": "checked" | "unchecked";
        readonly "aria-checked": "true" | "false" | "mixed";
        readonly type: "button";
        readonly role: "radio";
        readonly tabindex: number;
        readonly onkeydown: (e: BitsKeyboardEvent) => void;
        readonly onfocus: (_: BitsFocusEvent) => void;
        readonly onclick: (_: BitsMouseEvent) => void;
    };
}
export declare class RadioGroupInputState {
    static create(): RadioGroupInputState;
    readonly root: RadioGroupRootState;
    readonly shouldRender: boolean;
    readonly props: {
        readonly name: string | undefined;
        readonly value: string;
        readonly required: boolean;
        readonly disabled: boolean;
    };
    constructor(root: RadioGroupRootState);
}
export {};
